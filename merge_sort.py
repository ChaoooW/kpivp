# -*- coding: utf-8 -*-
"""merge_sort

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rc5odundJkJMHz3DnIrKOLIarpt9Ca64
"""

#time complexity: O(nlgn)
#Space complexity: O(n)
import random
def print_list(arr, size):
    print()
    for i in range(size):
        print ("% d"% arr[i], end =",")
    print()

def merge(arr, l, m, r):
    n1 = m - l + 1
    n2 = r - m
 
    L = [0] * (n1)
    R = [0] * (n2)

    for i in range(0, n1):
        L[i] = arr[l + i]
 
    for j in range(0, n2):
        R[j] = arr[m + 1 + j]
 
    i = 0    
    j = 0 
    k = l 
 
    while i < n1 and j < n2:
        if L[i] <= R[j]:
            arr[k] = L[i]
            i += 1
        else:
            arr[k] = R[j]
            j += 1
        k += 1
 
    while i < n1:
        arr[k] = L[i]
        i += 1
        k += 1

    while j < n2:
        arr[k] = R[j]
        j += 1
        k += 1
 
def mergeSort(arr, l, r):
    if l < r:
        m = l+(r-l)//2
 
        mergeSort(arr, l, m)
        mergeSort(arr, m+1, r)
        merge(arr, l, m, r)
 
if __name__ == "__main__":
  print("generating int list...")
  int_list = random.sample(range(1, 50), 10)
  print_list(int_list, len(int_list))
  random_i = random.randint(0,len(int_list))
  mergeSort(int_list, 0, len(int_list)-1)
  print(f'merge sort :')
  print_list(int_list, len(int_list))